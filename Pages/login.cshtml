@page
@model PowerDNS_Web.Pages.loginModel
@inject IViewLocalizer L
@{
    var returnUrl = Request?.Query["ReturnUrl"].ToString();
    ViewData["Title"] = L["Login"];
}

@if (ViewData["SettingsCheck"]?.ToString() == "False")
{
    <!-- WARNING MESSAGE -->
    <div class="alert alert-warning align-items-center justify-content-center" style="display:flex;" role="alert">
        <i class="fa fa-exclamation-triangle fa-2x me-2"></i>
        <div>
            It seems your settings <strong>are missing</strong>. Go to <code>/var/www/powerdns-web</code> and fill out <code>appsettings.json</code>.
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 70vh;">
        <div class="card p-4 shadow-lg" style="width: 360px;">
            <div class="text-center mb-3">
                <h3 class="mb-1">@L["Login"]</h3>
                <div class="text-muted small">@L["Welcome"]</div>
            </div>

            <form id="loginForm" class="needs-validation" novalidate>
                <input type="hidden" name="ReturnUrl" id="returnUrl" value="@returnUrl" />

                <div class="mb-3">
                    <label for="username" class="form-label">@L["Login"]</label>
                    <input type="text" class="form-control" id="username" placeholder="@L["Enter_Login"]" required>
                    <div class="invalid-feedback">@L["Login_Required"]</div>
                </div>

                <div class="mb-2">
                    <label for="password" class="form-label">@L["Password"]</label>
                    <div class="input-group">
                        <input type="password" class="form-control" id="password" placeholder="@L["Enter_Password"]" required>
                        <button class="btn btn-outline-secondary" type="button" id="togglePw" aria-pressed="false" title="@L["Login_ShowPassword"]">
                            <i class="fa fa-eye" aria-hidden="true"></i>
                        </button>
                        <div class="invalid-feedback">@L["Login_Required"]</div>
                    </div>
                    <div class="form-text"><span id="pwHint">@L["Login_PwHint"]</span></div>
                </div>

                <button type="submit" class="btn btn-primary w-100 mt-2" id="btnSignIn">
                    <i class="fa fa-sign-in me-1"></i>@L["Login_SignIn"]
                </button>

                @Html.AntiForgeryToken()
            </form>

            <!-- Fallback notification (если нет showToast) -->
            <div id="notification-div" class="alert mt-3 d-none"></div>
        </div>
    </div>
}

@section Scripts {
    <script>
        (function () {
            // ---- локализованные строки в JS (корректное экранирование) ----
            const T = {
                required: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Login_Required"].Value)),
                signingIn: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Login_SigningIn"].Value)),
                success: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Login_SuccessRedirect"].Value)),
                netErr: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Login_NetworkError"].Value)),
                errPrefix: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Login_AuthErrorPrefix"].Value)),
                showPw: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Login_ShowPassword"].Value)),
                hidePw: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Login_HidePassword"].Value))
            };

            // ---- валидация Bootstrap ----
            (function () {
                const forms = document.querySelectorAll('.needs-validation');
                Array.from(forms).forEach(form => {
                    form.addEventListener('submit', evt => {
                        if (!form.checkValidity()) { evt.preventDefault(); evt.stopPropagation(); }
                        form.classList.add('was-validated');
                    }, false);
                });
            })();

            // ---- показать/скрыть пароль ----
            (function () {
                const btn = document.getElementById('togglePw');
                const pw = document.getElementById('password');
                if (!btn || !pw) return;
                btn.addEventListener('click', () => {
                    const isText = pw.type === 'text';
                    pw.type = isText ? 'password' : 'text';
                    btn.setAttribute('aria-pressed', isText ? 'false' : 'true');
                    btn.setAttribute('title', isText ? T.showPw : T.hidePw);
                    const icon = btn.querySelector('i');
                    if (icon) { icon.classList.toggle('fa-eye'); icon.classList.toggle('fa-eye-slash'); }
                });
            })();

            // ---- отправка формы ----
            const form = document.getElementById('loginForm');
            if (!form) return;

            const notify = (kind, msg) => {
                if (typeof window.showToast === 'function') {
                    const delay = kind === 'danger' ? 6000 : 3500;
                    window.showToast(kind, msg, delay);
                    return;
                }
                const n = document.getElementById('notification-div');
                if (!n) return;
                n.className = `alert mt-3 ${kind === 'success' ? 'alert-success' : kind === 'warning' ? 'alert-warning' : 'alert-danger'}`;
                n.textContent = msg;
                n.classList.remove('d-none');
            };

            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                const u = document.getElementById('username').value.trim();
                const p = document.getElementById('password').value.trim();
                if (!u || !p) {
                    notify('warning', T.required);
                    return;
                }

                const btn = document.getElementById('btnSignIn');
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
                const returnUrl = document.getElementById('returnUrl')?.value || '';

                const setBusy = (busy) => {
                    btn.disabled = busy;
                    btn.innerHTML = busy ? `<span class="spinner-border spinner-border-sm me-2"></span>${T.signingIn}` : `<i class="fa fa-sign-in me-1"></i>@L["Login_SignIn"]`;
                };

                setBusy(true);
                try {
                    const resp = await fetch('/login?handler=Login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ username: u, password: p, returnUrl: returnUrl })
                    });

                    const result = await resp.json().catch(() => ({}));

                    if (resp.ok && result && result.success) {
                        notify('success', T.success);
                        // client-side redirect fallback (server тоже может редиректить после SignIn)
                        const target = (returnUrl && /^\/(?!\/)/.test(returnUrl)) ? returnUrl : '/';
                        setTimeout(() => { window.location.href = target; }, 900);
                    } else {
                        const msg = (result && result.message) ? String(result.message) : 'Unknown error';
                        notify('danger', T.errPrefix + msg);
                        setBusy(false);
                    }
                } catch {
                    notify('danger', T.netErr);
                    setBusy(false);
                }
            });
        })();
    </script>
}
