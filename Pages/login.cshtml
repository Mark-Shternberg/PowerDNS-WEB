@page
@model PowerDNS_Web.Pages.loginModel
@{
    var returnUrl = Request?.Query["ReturnUrl"].ToString();
    ViewData["Title"] = "Login";
}

@if (ViewData["SettingsCheck"]?.ToString() == "False")
{
    <div class="alert alert-warning d-flex align-items-center justify-content-center" role="alert">
        <i class="fa fa-exclamation-triangle fa-2x me-2"></i>
        <div>
            It seems your settings <strong>are missing</strong>. Go to program folder
            <code>/var/www/powerdns-web</code> and fill <code>appsettings.json</code>.
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 60vh;">
        <div class="card p-4 shadow-lg" style="width: 360px;">
            <h3 class="text-center mb-3">Вход</h3>

            <form id="loginForm" method="post" action="?handler=Login" novalidate>
                @Html.AntiForgeryToken()
                <input type="hidden" name="ReturnUrl" id="returnUrl" value="@returnUrl" />

                <div class="mb-3">
                    <label for="username" class="form-label">Логин</label>
                    <input type="text" class="form-control" id="username" name="username" autocomplete="username" required>
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Пароль</label>
                    <input type="password" class="form-control" id="password" name="password" autocomplete="current-password" required>
                </div>

                <button type="submit" class="btn btn-primary w-100">Войти</button>
            </form>

            <div id="notification-div" class="alert mt-3 d-none" role="alert"></div>
        </div>
    </div>
}

@section Scripts {
    <script>
        // === компактное уведомление в div ===
        function showDivNotification(text, type /*1=ok,2=err,3=warn*/) {
            const el = document.getElementById('notification-div');
            el.classList.remove('d-none','alert-success','alert-danger','alert-warning','alert-info');
            el.classList.add(type===1?'alert-success':type===3?'alert-warning':'alert-danger');
            el.textContent = text;
        }

        // === перехватываем submit, шлём JSON с анти-фроджи токеном, учитываем ReturnUrl ===
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('loginForm');
            if (!form) return;

            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                const username = (document.getElementById('username').value || '').trim();
                const password = (document.getElementById('password').value || '').trim();
                const returnUrl = document.getElementById('returnUrl')?.value || '';
                const token = form.querySelector('input[name="__RequestVerificationToken"]')?.value || '';

                if (!username || !password) {
                    showDivNotification('Логин и пароль обязательны.', 2);
                    return;
                }

                try {
                    const resp = await fetch('?handler=Login', {
                        method: 'POST',
                        credentials: 'same-origin',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ username, password, returnUrl })
                    });

                    // пробуем распарсить JSON; если сервер отдал HTML (редирект на /login), поймаем исключение
                    let result = {};
                    try { result = await resp.json(); } catch { /* no-op */ }

                    if (resp.ok && result?.success) {
                        showDivNotification('Авторизация успешна! Перенаправление…', 1);
                        const target = result.redirect || '/';
                        // небольшая пауза — чтобы браузер успел записать auth cookie
                        setTimeout(() => window.location.assign(target), 300);
                    } else {
                        const msg = result?.message || `Ошибка авторизации (HTTP ${resp.status}).`;
                        showDivNotification(msg, 2);
                    }
                } catch (err) {
                    showDivNotification('Сеть недоступна или сервер не отвечает.', 2);
                }
            });
        });
    </script>
}
