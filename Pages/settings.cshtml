@page
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer L
@model PowerDNS_Web.Pages.SettingsModel
@{
    ViewData["Title"] = L["Settings_Title"];
}

<div class="container mt-4">
    <h2 class="text-center mb-4"><i class="fa fa-gear me-2"></i>@L["Settings_Title"]</h2>

    <form id="settingsForm" novalidate>
        <div class="row g-4">

            <!-- MYSQL SETTINGS -->
            <div class="col-md-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title mb-3">@L["Section_MySQL"]</h5>

                        <div class="mb-2">
                            <label class="form-label">@L["Label_Server"]</label>
                            <input type="text"
                                   id="mysqlServer"
                                   class="form-control"
                                   value="@Model.Settings.MySQL.Server"
                                   placeholder="@L["Placeholder_MySQLServer"]" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">@L["Label_User"]</label>
                            <input type="text"
                                   id="mysqlUser"
                                   class="form-control"
                                   value="@Model.Settings.MySQL.User" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">@L["Label_Password"]</label>
                            <div class="input-group">
                                <input type="password"
                                       id="mysqlPassword"
                                       class="form-control"
                                       value="@Model.Settings.MySQL.Password" />
                                <button class="btn btn-outline-secondary"
                                        type="button"
                                        data-toggle-vis="#mysqlPassword"
                                        title="@L["Title_ShowHide"]">
                                    <i class="fa fa-eye"></i>
                                </button>
                            </div>
                        </div>
                        <div class="mb-2">
                            <label class="form-label">@L["Label_Database"]</label>
                            <input type="text"
                                   id="mysqlDatabase"
                                   class="form-control"
                                   value="@Model.Settings.MySQL.Database" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- POWERDNS SETTINGS -->
            <div class="col-md-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title mb-3">@L["Section_PowerDNS"]</h5>

                        <div class="mb-2">
                            <label class="form-label">@L["Label_ApiUrl"]</label>
                            <input type="text"
                                   id="pdnsUrl"
                                   class="form-control"
                                   value="@Model.Settings.PowerDNS.Url"
                                   placeholder="@L["Placeholder_PowerDNSUrl"]" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">@L["Label_ApiKey"]</label>
                            <div class="input-group">
                                <input type="password"
                                       id="pdnsApiKey"
                                       class="form-control"
                                       value="@Model.Settings.PowerDNS.Api_Key" />
                                <button class="btn btn-outline-secondary"
                                        type="button"
                                        data-toggle-vis="#pdnsApiKey"
                                        title="@L["Title_ShowHide"]">
                                    <i class="fa fa-eye"></i>
                                </button>
                            </div>
                        </div>
                        <div class="mb-2">
                            <label class="form-label">@L["Label_DefaultA"]</label>
                            <input type="text"
                                   id="pdnsDefaultA"
                                   class="form-control ip-input"
                                   value="@Model.Settings.PowerDNS.Default_A"
                                   placeholder="@L["Placeholder_DefaultA"]" />
                        </div>

                        <h6 class="mt-3">@L["Heading_SOA"]</h6>
                        <div class="mb-2">
                            <label class="form-label">@L["Label_SoaNs"]</label>
                            <input type="text"
                                   id="pdnsSoaNs"
                                   class="form-control"
                                   value="@Model.Settings.PowerDNS.SOA.Ns"
                                   placeholder="@L["Placeholder_SoaNs"]" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">@L["Label_SoaMail"]</label>
                            <input type="text"
                                   id="pdnsSoaMail"
                                   class="form-control"
                                   value="@Model.Settings.PowerDNS.SOA.Mail"
                                   placeholder="@L["Placeholder_SoaMail"]" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- RECURSOR SETTINGS -->
            <div class="col-md-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title mb-3">@L["Section_Recursor"]</h5>

                        <div class="mb-2">
                            <label class="form-label">@L["Label_RecursorStatus"]</label>
                            <select id="recursorStatus" class="form-select" onchange="toggleRecursorFields()">
                                <!-- значения оставляем как 'Enabled'/'Disabled' для бэка; текст локализуем -->
                                <option value="Enabled" selected="@(Model.Settings.Recursor.Enabled == "Enabled" ? "selected" : null)">
                                    @L["Option_Enabled"]
                                </option>
                                <option value="Disabled" selected="@(Model.Settings.Recursor.Enabled == "Disabled" ? "selected" : null)">
                                    @L["Option_Disabled"]
                                </option>
                            </select>
                        </div>

                        <div id="recursorFields">
                            <div class="mb-2">
                                <label class="form-label">@L["Label_RecursorUrl"]</label>
                                <input type="text"
                                       id="recursorUrl"
                                       class="form-control"
                                       value="@Model.Settings.Recursor.Url"
                                       placeholder="http://127.0.0.1:8082/api/v1" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label">@L["Label_ApiKey"]</label>
                                <div class="input-group">
                                    <input type="password"
                                           id="recursorApiKey"
                                           class="form-control"
                                           value="@Model.Settings.Recursor.Api_Key" />
                                    <button class="btn btn-outline-secondary"
                                            type="button"
                                            data-toggle-vis="#recursorApiKey"
                                            title="@L["Title_ShowHide"]">
                                        <i class="fa fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="text-muted small mt-2">
                            @L["Tip_RecursorAuthoritativeHint"] <code>127.0.0.1:5300</code>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-center">
            <button type="button"
                    id="btnSaveSettings"
                    class="btn btn-primary mt-4"
                    style="min-width:260px;"
                    onclick="saveSettings()">
                <i class="fa fa-save me-1"></i> @L["Btn_SaveSettings"]
            </button>
        </div>
    </form>
</div>

@Html.AntiForgeryToken()

@section Scripts {
<script src="~/js/validation.js"></script>
<script>
    // ===== LOCALIZED MESSAGES =====
    // безопасно внедряем строки в JS
    const M = {
        mysqlRequired: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Validation_MySQL_Required"].Value)),
        pdnsUrlBad: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Validation_PowerDNS_Url"].Value)),
        defaultAInvalid: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Validation_DefaultA_Invalid"].Value)),
        soaNsInvalid: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Validation_SoaNs_Invalid"].Value)),
        soaEmailInvalid: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Validation_SoaEmail_Invalid"].Value)),
        recursorUrlBad: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Validation_Recursor_Url"].Value)),
        saveOk: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Save_Success"].Value)),
        saveFail: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(L["Save_Failed"].Value))
    };

    // ===== UTIL: CSRF =====
    function getCsrf() {
        const el = document.querySelector('input[name="__RequestVerificationToken"]');
        return el ? el.value : '';
    }

    // ===== TOGGLE PASSWORD VISIBILITY BUTTONS =====
    document.addEventListener('click', (e) => {
        const btn = e.target.closest('[data-toggle-vis]');
        if (!btn) return;
        const sel = btn.getAttribute('data-toggle-vis');
        const input = document.querySelector(sel);
        if (!input) return;
        input.type = input.type === 'password' ? 'text' : 'password';
        btn.querySelector('i')?.classList.toggle('fa-eye');
        btn.querySelector('i')?.classList.toggle('fa-eye-slash');
    });

    // ===== RECURSOR FIELDS VISIBILITY =====
    function toggleRecursorFields() {
        const status = document.getElementById("recursorStatus").value;
        const fields = document.getElementById("recursorFields");
        fields.style.display = (status === "Disabled") ? "none" : "block";
    }
    document.addEventListener("DOMContentLoaded", toggleRecursorFields);

    // ===== LIGHT VALIDATORS =====
    function isHttpUrl(u) {
        try { const x = new URL(u); return x.protocol === 'http:' || x.protocol === 'https:'; } catch { return false; }
    }

    function mustIPv4OrEmpty(v) {
        if (!v) return true;
        const err = validateIPv4(v); // из validation.js; "" если ОК
        return !err;
    }
    function mustFqdnOrEmpty(v) {
        if (!v) return true;
        const err = validateForwardZoneName(v); // без конечной точки
        return !err;
    }
    function isEmail(s) {
        return /\^[^\s@@]+@@[^\s@@]+\.[^\s@@]+\$/.test((s||'').trim());
    }

    // ===== COLLECT + SAVE SETTINGS =====
    async function saveSettings() {
        const btn = document.getElementById('btnSaveSettings');
        btn.disabled = true;

        const settingsData = {
            MySQL: {
                Server:   document.getElementById("mysqlServer").value.trim(),
                User:     document.getElementById("mysqlUser").value.trim(),
                Password: document.getElementById("mysqlPassword").value,
                Database: document.getElementById("mysqlDatabase").value.trim()
            },
            PowerDNS: {
                Url:       document.getElementById("pdnsUrl").value.trim(),
                Api_Key:   document.getElementById("pdnsApiKey").value,
                Default_A: document.getElementById("pdnsDefaultA").value.trim(),
                SOA: {
                    Ns:   document.getElementById("pdnsSoaNs").value.trim(),
                    Mail: document.getElementById("pdnsSoaMail").value.trim()
                }
            },
            Recursor: {
                Enabled: document.getElementById("recursorStatus").value,
                Url:     document.getElementById("recursorUrl")?.value.trim() || "",
                Api_Key: document.getElementById("recursorApiKey")?.value || ""
            }
        };

        // === CLIENT-SIDE VALIDATION ===
        if (!settingsData.MySQL.Server || !settingsData.MySQL.User || !settingsData.MySQL.Database) {
            showToast('warning', M.mysqlRequired);
            btn.disabled = false; return;
        }

        if (!isHttpUrl(settingsData.PowerDNS.Url)) {
            showToast('warning', M.pdnsUrlBad);
            btn.disabled = false; return;
        }
        if (!mustIPv4OrEmpty(settingsData.PowerDNS.Default_A)) {
            showToast('warning', M.defaultAInvalid);
            btn.disabled = false; return;
        }
        if (!mustFqdnOrEmpty(settingsData.PowerDNS.SOA.Ns)) {
            showToast('warning', M.soaNsInvalid);
            btn.disabled = false; return;
        }
        if (settingsData.PowerDNS.SOA.Mail && !isEmail(settingsData.PowerDNS.SOA.Mail)) {
            showToast('warning', M.soaEmailInvalid);
            btn.disabled = false; return;
        }

        if (settingsData.Recursor.Enabled === 'Enabled') {
            if (!isHttpUrl(settingsData.Recursor.Url)) {
                showToast('warning', M.recursorUrlBad);
                btn.disabled = false; return;
            }
        }

        try {
            const response = await fetch(window.location.pathname + "?handler=SaveSettings", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "RequestVerificationToken": getCsrf()
                },
                body: JSON.stringify(settingsData)
            });

            const payload = await response.json();
            if (!response.ok || payload?.success === false) {
                throw new Error(payload?.message || M.saveFail);
            }

            showToast('success', payload?.message || M.saveOk);
        } catch (err) {
            console.error(err);
            showToast('danger', err.message || M.saveFail);
        } finally {
            btn.disabled = false;
        }
    }
</script>
}
