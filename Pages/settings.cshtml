@page
@model PowerDNS_Web.Pages.SettingsModel
@{
    ViewData["Title"] = "Settings";
}

<div class="container mt-4">
    <h2 class="text-center mb-4">Settings</h2>

    <form id="settingsForm">
        <div class="row">
            <!-- MYSQL SETTINGS -->
            <div class="col-md-4">
                <h5>MySQL Settings</h5>
                <div class="mb-2">
                    <label class="form-label">Server:</label>
                    <input type="text" id="mysqlServer" class="form-control" value="@Model.Settings.MySQL.Server">
                </div>
                <div class="mb-2">
                    <label class="form-label">User:</label>
                    <input type="text" id="mysqlUser" class="form-control" value="@Model.Settings.MySQL.User">
                </div>
                <div class="mb-2">
                    <label class="form-label">Password:</label>
                    <input type="password" id="mysqlPassword" class="form-control" value="@Model.Settings.MySQL.Password">
                </div>
                <div class="mb-2">
                    <label class="form-label">Database:</label>
                    <input type="text" id="mysqlDatabase" class="form-control" value="@Model.Settings.MySQL.Database">
                </div>
            </div>

            <!-- POWERDNS SETTINGS -->
            <div class="col-md-4">
                <h5>PowerDNS Settings</h5>
                <div class="mb-2">
                    <label class="form-label">API URL:</label>
                    <input type="text" id="pdnsUrl" class="form-control" value="@Model.Settings.PowerDNS.Url">
                </div>
                <div class="mb-2">
                    <label class="form-label">API Key:</label>
                    <input type="password" id="pdnsApiKey" class="form-control" value="@Model.Settings.PowerDNS.Api_Key">
                </div>
                <div class="mb-2">
                    <label class="form-label">Default A Record:</label>
                    <input type="text" id="pdnsDefaultA" class="form-control" value="@Model.Settings.PowerDNS.Default_A">
                </div>
                <h6 class="mt-3">SOA Configuration</h6>
                <div class="mb-2">
                    <label class="form-label">Primary NS:</label>
                    <input type="text" id="pdnsSoaNs" class="form-control" value="@Model.Settings.PowerDNS.SOA.Ns">
                </div>
                <div class="mb-2">
                    <label class="form-label">Admin Email:</label>
                    <input type="text" id="pdnsSoaMail" class="form-control" value="@Model.Settings.PowerDNS.SOA.Mail">
                </div>
            </div>

            <!-- RECURSOR SETTINGS -->
            <div class="col-md-4">
                <h5>Recursor Settings</h5>
                <div class="mb-2">
                    <label class="form-label">Recursor Status:</label>
                    <select id="recursorStatus" class="form-control" onchange="toggleRecursorFields()">
                        <option value="Enabled" selected="@(Model.Settings.Recursor.Enabled == "Enabled")">Enabled</option>
                        <option value="Disabled" selected="@(Model.Settings.Recursor.Enabled == "Disabled")">Disabled</option>
                    </select>
                </div>
                <div id="recursorFields">
                    <div class="mb-2">
                        <label class="form-label">Recursor URL:</label>
                        <input type="text" id="recursorUrl" class="form-control" value="@Model.Settings.Recursor.Url">
                    </div>
                    <div class="mb-2">
                        <label class="form-label">API Key:</label>
                        <input type="password" id="recursorApiKey" class="form-control" value="@Model.Settings.Recursor.Api_Key">
                    </div>
                </div>
            </div>
        </div>

        <div style="display: flex; justify-content: center;">
            <button type="button" class="btn btn-primary mt-3" style="width:400px;" onclick="saveSettings()">Save Settings</button>
        </div>
    </form>

    <div id="alertContainer-settings"></div>
</div>

<div id="notification" class="notification">
    <span id="notification-message"></span>
</div>

@Html.AntiForgeryToken()

<script>
    // FUNCTION TO TOGGLE RECURSOR FIELDS
    function toggleRecursorFields() {
        const recursorStatus = document.getElementById("recursorStatus").value;
        const recursorFields = document.getElementById("recursorFields");

        if (recursorStatus === "Disabled") {
            recursorFields.style.display = "none";
        } else {
            recursorFields.style.display = "block";
        }
    }

    // INITIALIZE FIELD VISIBILITY ON LOAD
    document.addEventListener("DOMContentLoaded", () => {
        toggleRecursorFields();
    });

    // SAVE SETTINGS
    async function saveSettings() {
        const settingsData = {
            MySQL: {
                Server: document.getElementById("mysqlServer").value,
                User: document.getElementById("mysqlUser").value,
                Password: document.getElementById("mysqlPassword").value,
                Database: document.getElementById("mysqlDatabase").value
            },
            PowerDNS: {
                Url: document.getElementById("pdnsUrl").value,
                Api_Key: document.getElementById("pdnsApiKey").value,
                Default_A: document.getElementById("pdnsDefaultA").value,
                SOA: {
                    Ns: document.getElementById("pdnsSoaNs").value,
                    Mail: document.getElementById("pdnsSoaMail").value
                }
            },
            Recursor: {
                Enabled: document.getElementById("recursorStatus").value,
                Url: document.getElementById("recursorUrl").value,
                Api_Key: document.getElementById("recursorApiKey").value
            }
        };

        try {
            let response = await fetch(window.location.pathname + "?handler=SaveSettings", {
                method: "POST",
                headers: { 
                    "Content-Type": "application/json",
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(settingsData)
            });

            if (response.ok) {
                let newModel = await response.json();
                if (newModel.success === false) {
                    showNotification('Error: ' + newModel.message, 2);
                } else {
                    showNotification('Settings saved', 1);
                }
            } else {
                showNotification('Error.', 2);
            }
        } catch (error) {
            showNotification('Fetching error.', 2);
        }
    }
</script>
