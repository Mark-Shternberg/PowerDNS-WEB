@page
@model PowerDNS_Web.Pages.settingsModel
@{
    ViewData["Title"] = "Настройки";
}

<div class="container" style="width: 500px;">
    <h2>Настройки MySQL соединения</h2>
    <form method="post" nctype="multipart/form-data">
        <div class="form-group">
            <label for="server">Сервер</label>
            <input type="text" class="form-control" id="server" name="server" value="@Model.MySQLConnection.Server" required />
        </div>

        <div class="form-group">
            <label for="user">Пользователь</label>
            <input type="text" class="form-control" id="user" name="user" value="@Model.MySQLConnection.User" required />
        </div>

        <div class="form-group">
            <label for="password">Пароль</label>
            <input type="password" class="form-control" id="password" name="password" value="@Model.MySQLConnection.Password" required />
        </div>

        <div class="form-group">
            <label for="database">База данных</label>
            <input type="text" class="form-control" id="database" name="database" value="@Model.MySQLConnection.Database" required />
        </div>

        <center style="display: flex;flex-direction: column;align-items: center;">
            <button type="button" id="btn-save" class="btn btn-primary mt-3" onclick="save()">
                <span id="btn-text">Сохранить настройки</span>
                <i id="spinner" class="fas fa-cog fa-spin" style="display: none; margin-left: 5px;"></i>
            </button>
        </center>
    </form>
</div>

<div id="notification" class="notification">
    <span id="notification-message"></span>
</div>
@Html.AntiForgeryToken()

<script>
    // SAVE SETTINGS
    async function save() {
        let server = document.getElementById('server').value;
        let user = document.getElementById('user').value;
        let password = document.getElementById('password').value;
        let database = document.getElementById('database').value;
        let btnSave = document.getElementById('btn-save');
        let spinner = document.getElementById('spinner');
        let btnText = document.getElementById('btn-text');

        // Отключаем кнопку и показываем индикатор загрузки
        btnSave.disabled = true;
        btnSave.classList.add("btn-secondary");
        btnSave.classList.remove("btn-primary");
        spinner.style.display = "inline-block";
        btnText.innerText = "Проверка соединения";

        try {
            let response = await fetch('/settings?handler=Save_settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    server: server,
                    user: user,
                    password: password,
                    database: database
                })
            });

            if (response.ok) {
                let newModel = await response.json();
                if (newModel.success === false) {
                    showNotification('Ошибка: ' + newModel.message, 2);
                } else {
                    showNotification('Настройки корректны и сохранены', 1);
                }
            } else {
                showNotification('Ошибка при сохранении.', 2);
            }
        } catch (error) {
            showNotification('Ошибка сети.', 2);
        }

        // Включаем кнопку обратно
        btnSave.disabled = false;
        btnSave.classList.add("btn-primary");
        btnSave.classList.remove("btn-secondary");
        spinner.style.display = "none";
        btnText.innerText = "Сохранить настройки";
    }

    // NOTIFICATION
    function showNotification(message, type) {
        var notification = document.getElementById("notification");
        var messageSpan = document.getElementById("notification-message");

        messageSpan.innerText = message;

        notification.classList.remove("notification-success", "notification-error");

        if (type === 1) {
            notification.classList.add("notification-success");
        } else if (type === 2) {
            notification.classList.add("notification-error");
        }

        notification.classList.add("show");

        // Hide in 3s
        setTimeout(function () {
            notification.classList.remove("show");
        }, 3000);
    }
</script>


