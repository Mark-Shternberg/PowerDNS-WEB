@page
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer L
@model PowerDNS_Web.Pages.RecursorModel
@{
    ViewData["Title"] = L["Recursor_Title"];
    var authLabel = L["Authoritative_Server_Label"].Value;
}

@if (ViewData["RecursorEnabled"]?.ToString() != "Enabled")
{
    var settingsLink = $"<a href=\"/settings\">{L["Link_Settings"].Value}</a>";
    <div class="alert alert-warning d-flex align-items-center" role="alert">
        <i class="fa fa-exclamation-triangle fa-2x me-2"></i>
        <div>@Html.Raw(L["Recursor_Disabled_WithLink", settingsLink].Value)</div>
    </div>
}

<div class="container mt-4">
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-2 mb-3">
        <h2 class="mb-0"><i class="fa fa-rotate me-2"></i>@L["Recursor_Title"].Value</h2>
        <div class="text-muted small">@L["Recursor_Subtitle"].Value</div>
    </div>

    <!-- ADD NEW FORWARD ZONE -->
    <div class="row g-3 align-items-end">
        <div class="col-md-6">
            <label for="availableZones" class="form-label">@L["Label_AvailableZones"].Value</label>
            @if (Model.AvailableZones.Count == 0)
            {
                <select id="availableZones" class="form-select" disabled>
                    <option>@L["Option_NoZones"].Value</option>
                </select>
            }
            else
            {
                <select id="availableZones" class="form-select">
                    @foreach (var zone in Model.AvailableZones)
                    {
                        <option value="@zone">@zone</option>
                    }
                </select>
            }
        </div>
        <div class="col-md-2">
            @if (Model.AvailableZones.Count == 0)
            {
                <button class="btn btn-primary w-100" disabled>@L["Btn_Add"].Value</button>
            }
            else
            {
                <button class="btn btn-primary w-100" onclick="addForwardZone()">
                    <i class="fa fa-plus me-1"></i> @L["Btn_Add"].Value
                </button>
            }
        </div>
    </div>

    <!-- FORWARD ZONES TABLE -->
    <h4 class="mt-4">@L["Heading_ConfiguredForwardZones"].Value</h4>
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>@L["Th_Zone"].Value</th>
                    <th>@L["Th_ForwardTo"].Value</th>
                    <th style="width:220px;">@L["Th_Actions"].Value</th>
                </tr>
            </thead>
            <tbody id="forwardZonesTable">
                @foreach (var zone in Model.ForwardZones.OrderBy(g => g.Name != "." ? 1 : 0))
                {
                    <tr>
                        <td>@zone.Name</td>
                        <td>
                            @{
                                var displayList = zone.ForwardTo.Select(f => f.Trim() == "127.0.0.1:5300" ? authLabel : f);
                                @string.Join(", ", displayList)
                            }
                        </td>
                        <td>
                            <div class="d-flex gap-2">
                                <button class="btn btn-warning btn-sm" onclick="editZone('@zone.Name','@string.Join(", ", zone.ForwardTo)')">
                                    <i class="fa fa-edit"></i> @L["Btn_Edit"].Value
                                </button>
                                @if (zone.Name != ".")
                                {
                                    <button class="btn btn-danger btn-sm" onclick="removeForwardZone('@zone.Name')">
                                        <i class="fa fa-trash"></i> @L["Btn_Remove"].Value
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Confirm delete Modal (custom, no backdrop) -->
<div id="confirmModal" class="modal" style="display:none">
    <div class="modal-content">
        <p id="confirmMessage"></p>
        <div class="modal-buttons">
            <button id="confirmNo" class="btn btn-default">@L["Btn_Cancel"].Value</button>
            <button id="confirmYes" class="btn btn-danger">@L["Btn_Delete"].Value</button>
        </div>
    </div>
</div>

<!-- EDIT ZONE MODAL -->
<div class="modal fade" id="editZoneModal" tabindex="-1" aria-labelledby="editZoneModalLabel" aria-hidden="true" data-bs-backdrop="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editZoneModalLabel">@L["Modal_Edit_TitlePrefix"].Value <span id="zone_name-modal"></span> @L["Modal_Edit_TitleSuffixZone"].Value</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@L["Btn_Close"].Value"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">@L["Label_UpstreamDNS"].Value</label>
                    <div id="editZoneDNSContainer"></div>
                    <button type="button" class="btn btn-primary mt-2 w-100" onclick="addDnsField()">
                        <i class="fa fa-plus"></i> @L["Btn_AddDnsServer"].Value
                    </button>
                </div>

                <div class="alert alert-info w-100 text-center m-0" role="alert">
                    <i class="fa fa-info-circle"></i> 127.0.0.1:5300 — @L["Authoritative_Server_Label"].Value
                </div>

                <button type="button" class="btn btn-warning w-100 mt-3" onclick="saveRecord()">@L["Btn_SaveChanges"].Value</button>
            </div>
        </div>
    </div>
</div>

<script src="~/js/validation.js"></script>
@Html.AntiForgeryToken()

<!-- I18N payload to avoid “Expression expected” in editors -->
<script id="i18n-recursor" type="text/plain">
    @Html.Raw(System.Text.Json.JsonSerializer.Serialize(new
        {
            Toast_SelectZone = L["Toast_SelectZone"].Value,
            Toast_Added = L["Toast_Added"].Value,
            Toast_AddFail = L["Toast_AddFail"].Value,
            Toast_Removed = L["Toast_Removed"].Value,
            Toast_RemoveFail = L["Toast_RemoveFail"].Value,
            Toast_SaveOk = L["Toast_SaveOk"].Value,
            Toast_SaveFail = L["Toast_SaveFail"].Value,
            Toast_NoDns = L["Toast_NoDns"].Value,
            Toast_DnsIdx = L["Toast_DnsIdx"].Value,
            Placeholder_IpPort = L["Placeholder_IpPort"].Value,
            Confirm_DeleteMsg = L["Confirm_DeleteMsg"].Value 
        }))
</script>

<script>
    // ===== I18N =====
    let M = {};
    (function(){ try { const el = document.getElementById('i18n-recursor'); if (el?.textContent) M = JSON.parse(el.textContent); } catch {} })();

    // ===== ANTIFORGERY =====
    function getCsrf() {
        const el = document.querySelector('input[name="__RequestVerificationToken"]');
        return el ? el.value : '';
    }

    // ===== ADD FORWARD ZONE =====
    async function addForwardZone() {
        const selectedZone = document.getElementById("availableZones")?.value;
        if (!selectedZone) {
            showToast('warning', M.Toast_SelectZone || 'Please select a zone.');
            return;
        }

        try {
            const response = await fetch(window.location.pathname + "?handler=AddForwardZone", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "RequestVerificationToken": getCsrf()
                },
                body: JSON.stringify({ Zone: selectedZone })
            });

            const result = await response.json();
            if (!response.ok || !result.success) throw new Error(result.message || (M.Toast_AddFail || "Failed to add forward zone."));

            showToast('success', result.message || (M.Toast_Added || 'Zone added successfully'));
            setTimeout(() => location.reload(), 600);
        } catch (error) {
            showToast('danger', error.message || (M.Toast_AddFail || 'Unexpected error while adding forward zone'));
        }
    }

    // ===== DELETE FLOW =====
    let deleteTarget = null;

    function removeForwardZone(name) {
        deleteTarget = name;
        const msgTmpl = M.Confirm_DeleteMsg || "Are you sure you want to remove the forward zone: {name}?";
        document.getElementById("confirmMessage").textContent = msgTmpl.replace('{name}', name);
        document.getElementById("confirmModal").style.display = "block";
    }

    document.getElementById("confirmNo").addEventListener("click", () => {
        document.getElementById("confirmModal").style.display = "none";
        deleteTarget = null;
    });

    document.getElementById("confirmYes").addEventListener("click", async () => {
        if (!deleteTarget) return;
        document.getElementById("confirmModal").style.display = "none";
        const name = deleteTarget;
        deleteTarget = null;

        try {
            const response = await fetch(window.location.pathname + "?handler=RemoveForwardZone", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "RequestVerificationToken": getCsrf()
                },
                body: JSON.stringify({ Zone: name })
            });

            const result = await response.json();
            if (!response.ok || !result.success) throw new Error(result.message || (M.Toast_RemoveFail || "Failed to remove forward zone"));

            showToast('success', result.message || (M.Toast_Removed || 'Zone removed successfully'));
            setTimeout(() => location.reload(), 600);
        } catch (error) {
            showToast('danger', error.message || (M.Toast_RemoveFail || 'Unexpected error while removing forward zone'));
        }
    });

    // ===== EDIT ZONE =====
    function editZone(name, forwardTo) {
        const dnsContainer = document.getElementById("editZoneDNSContainer");
        dnsContainer.innerHTML = "";

        const dnsList = (forwardTo || "")
            .split(",")
            .map(x => x.trim())
            .filter(Boolean);

        if (dnsList.length === 0) dnsList.push("");

        dnsList.forEach((dns, idx) => addDnsField(dns, idx > 0));
        document.getElementById("zone_name-modal").textContent = name;

        new bootstrap.Modal(document.getElementById("editZoneModal"), { backdrop: false }).show();
    }

    // ===== ADD DNS FIELD ROW =====
    function addDnsField(value = "", showRemoveButton = true) {
        const dnsContainer = document.getElementById("editZoneDNSContainer");

        const row = document.createElement("div");
        row.className = "input-group mb-2";

        const input = document.createElement("input");
        input.type = "text";
        input.className = "form-control";
        input.placeholder = M.Placeholder_IpPort || "IP:Port (e.g., 8.8.8.8:53)";
        input.value = value;

        row.appendChild(input);

        if (showRemoveButton) {
            const removeButton = document.createElement("button");
            removeButton.type = "button";
            removeButton.className = "btn btn-danger";
            removeButton.innerHTML = '<i class="fa fa-trash"></i>';
            removeButton.addEventListener("click", () => {
                dnsContainer.removeChild(row);
                updateRemoveButtons();
            });
            row.appendChild(removeButton);
        }

        dnsContainer.appendChild(row);
        updateRemoveButtons();
    }

    // ===== TOGGLE REMOVE BUTTONS =====
    function updateRemoveButtons() {
        const rows = document.querySelectorAll("#editZoneDNSContainer .input-group");
        const removeButtons = document.querySelectorAll("#editZoneDNSContainer .btn-danger");
        if (rows.length <= 1) removeButtons.forEach(b => b.style.display = "none");
        else removeButtons.forEach(b => b.style.display = "inline-block");
    }

    // ===== SAVE CHANGES =====
    async function saveRecord() {
        const inputs = document.querySelectorAll("#editZoneDNSContainer input");
        const dnsServers = Array.from(inputs)
            .map(i => i.value.trim())
            .filter(Boolean);

        const name = document.getElementById("zone_name-modal").textContent;

        if (dnsServers.length === 0) {
            showToast('warning', M.Toast_NoDns || 'At least one DNS server must be specified.');
            return;
        }

        for (let i = 0; i < dnsServers.length; i++) {
            const err = validateIPv4withPort(dnsServers[i]);
            if (err) {
                const tmpl = M.Toast_DnsIdx || "Error in DNS {n}: {err}";
                showToast('warning', tmpl.replace('{n}', (i + 1)).replace('{err}', err));
                return;
            }
        }

        try {
            const response = await fetch(window.location.pathname + "?handler=editZone", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "RequestVerificationToken": getCsrf()
                },
                body: JSON.stringify({ Name: name, DnsServers: dnsServers.join(",") })
            });

            const result = await response.json();
            if (!response.ok || !result.success) throw new Error(result.message || (M.Toast_SaveFail || "Failed to save DNS servers"));

            showToast('success', result.message || (M.Toast_SaveOk || 'DNS servers updated successfully'));
            const modal = bootstrap.Modal.getInstance(document.getElementById("editZoneModal"));
            modal?.hide();
            setTimeout(() => location.reload(), 600);

        } catch (error) {
            showToast('danger', error.message || (M.Toast_SaveFail || 'Unexpected error while saving DNS servers'));
        }
    }
</script>
