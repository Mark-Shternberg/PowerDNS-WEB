@page
@model PowerDNS_Web.Pages.userModel
@using System.Text.Json
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer L
@{
    ViewData["Title"] = L["UM_Title"];
}

<div class="container mt-4">
    <h2 class="text-center mb-4"><i class="fa fa-users me-2"></i>@L["UM_Header"].Value</h2>

    <div class="row g-3">
        <!-- ADD USER -->
        <div class="col-md-4">
            <div class="card p-4 shadow-sm">
                <h5 class="text-center mb-3">@L["UM_AddNewUser"].Value</h5>
                <form id="loginForm" method="post" novalidate>
                    <div class="mb-3">
                        <input class="form-control" name="username" id="username" type="text" placeholder="@L["UM_Placeholder_Username"].Value" required />
                    </div>

                    <div class="mb-3">
                        <label for="role" class="form-label">@L["UM_Label_SelectRole"].Value</label>
                        <select class="form-control" name="role" id="role">
                            <option value="Administrator">@L["UM_Role_Administrator"].Value</option>
                            <!-- <option value="ReadOnly">@L["UM_Role_ReadOnly"].Value</option> -->
                        </select>
                    </div>

                    <div class="mb-3">
                        <input class="form-control" name="password" id="password" type="password" placeholder="@L["UM_Placeholder_Password"].Value" required />
                    </div>

                    <button type="submit" id="btn-save" class="btn btn-primary w-100">
                        <i class="fa fa-user-plus me-1"></i> @L["UM_Btn_AddUser"].Value
                    </button>
                </form>
            </div>
        </div>

        <!-- USERS TABLE -->
        <div class="col-md-8">
            <div class="table-responsive">
                <table class="table table-hover text-center align-middle">
                    <thead class="table-dark">
                        <tr>
                            <th>@L["UM_Th_Username"].Value</th>
                            <th>@L["UM_Th_Role"].Value</th>
                            <th>@L["UM_Th_Password"].Value</th>
                            <th style="width:200px;">@L["UM_Th_Actions"].Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.main_table != null)
                        {
                            @foreach (var item in Model.main_table)
                            {
                                <tr id="row_@item.username">
                                    <td><strong>@item.username</strong></td>
                                    <td>
                                        <span id="role_old_@item.username">@item.role</span>
                                        <select hidden name="role" id="role_new_@item.username" class="form-control">
                                            <option value="Administrator" selected="@(item.role == "Administrator" ? "selected" : null)">@L["UM_Role_Administrator"].Value</option>
                                            <!-- <option value="ReadOnly" selected="@(item.role == "ReadOnly" ? "selected" : null)">@L["UM_Role_ReadOnly"].Value</option> -->
                                        </select>
                                    </td>
                                    <td>
                                        <input hidden name="password" id="password_new_@item.username" class="form-control" placeholder="@L["UM_Placeholder_NewPassword"].Value">
                                    </td>
                                    <td>
                                        <div class="d-flex justify-content-center gap-2">
                                            <button type="button" class="btn btn-warning btn-sm btn-edit" data-id="@item.username" title="@L["UM_Btn_Edit"].Value">
                                                <i class="fa fa-edit"></i>
                                            </button>
                                            <button hidden type="button" id="cancel_@item.username" class="btn btn-sm btn-default" data-id="@item.username">@L["UM_Btn_Cancel"].Value</button>
                                            <button hidden type="button" class="btn btn-success btn-sm btn-save-edit" data-id="@item.username" title="@L["UM_Btn_Save"].Value">
                                                <i class="fa fa-save"></i> @L["UM_Btn_Save"].Value
                                            </button>
                                            <button type="button" class="btn btn-danger btn-sm btn-delete" data-id="@item.username" title="@L["UM_Btn_Delete"].Value">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- CONFIRM DELETE MODAL (NO BACKDROP) -->
<div id="confirmModal" class="modal fade" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true" data-bs-backdrop="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">@L["UM_Modal_ConfirmDeletion"].Value</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@L["UM_Btn_Cancel"].Value"></button>
            </div>
            <div class="modal-body">
                <p id="confirmMessage" class="mb-0"></p>
            </div>
            <div class="modal-footer">
                <button id="confirmNo" class="btn btn-secondary" data-bs-dismiss="modal">@L["UM_Btn_Cancel"].Value</button>
                <button id="confirmYes" class="btn btn-danger">@L["UM_Btn_Delete"].Value</button>
            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

@section Scripts {
    <script>
        // Локализованные строки в JS
        const T = {
            fillAll: @Html.Raw(JsonSerializer.Serialize(L["UM_Msg_FillAll"].Value)),
            usernameShort: @Html.Raw(JsonSerializer.Serialize(L["UM_Msg_UsernameTooShort"].Value)),
            regError: @Html.Raw(JsonSerializer.Serialize(L["UM_Msg_RegistrationError"].Value)),
            userAdded: @Html.Raw(JsonSerializer.Serialize(L["UM_Msg_UserAdded"].Value)),
            saveError: @Html.Raw(JsonSerializer.Serialize(L["UM_Msg_SaveError"].Value)),
            saveOk: @Html.Raw(JsonSerializer.Serialize(L["UM_Msg_SaveOk"].Value)),
            confirmDeletePrefix: @Html.Raw(JsonSerializer.Serialize(L["UM_Modal_ConfirmDelete_Prefix"].Value)),
            deletionError: @Html.Raw(JsonSerializer.Serialize(L["UM_Msg_UserDeletionError"].Value)),
            deletedPrefix: @Html.Raw(JsonSerializer.Serialize(L["UM_Msg_UserDeletedPrefix"].Value))
        };

        // ===== CSRF =====
        function getCsrf() {
            const el = document.querySelector('input[name="__RequestVerificationToken"]');
            return el ? el.value : '';
        }

        // ===== ADD NEW USER =====
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const username = document.getElementById('username').value.trim();
            const role = document.getElementById('role').value;
            const password = document.getElementById('password').value;

            if (!username || !password) {
                showToast('warning', T.fillAll);
                return;
            }
            if (username.length < 3) {
                showToast('warning', T.usernameShort);
                return;
            }

            try {
                const btn = document.getElementById('btn-save');
                btn.disabled = true;

                const resp = await fetch(window.location.pathname + '?handler=add_new_user', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCsrf()
                    },
                    body: JSON.stringify({ username, role, password })
                });

                const data = await resp.json();
                if (!resp.ok || !data?.success) throw new Error(data?.message || T.regError);

                showToast('success', T.userAdded);
                setTimeout(() => location.reload(), 600);
            } catch (err) {
                showToast('danger', err.message || T.regError);
            } finally {
                document.getElementById('btn-save').disabled = false;
            }
        });

        // ===== EVENT DELEGATION FOR TABLE BUTTONS =====
        document.addEventListener('click', (e) => {
            const editBtn = e.target.closest('.btn-edit');
            const saveBtn = e.target.closest('.btn-save-edit');
            const cancelBtn = e.target.closest('.btn-default');
            const delBtn = e.target.closest('.btn-delete');

            if (editBtn) onEdit(editBtn);
            else if (saveBtn) onSave(saveBtn);
            else if (cancelBtn) onCancel(cancelBtn);
            else if (delBtn) onDelete(delBtn);
        });

        // ===== EDIT MODE =====
        function onEdit(btn) {
            const id = btn.dataset.id;
            const row = document.getElementById('row_' + id);
            if (!row) return;

            row.querySelector('#password_new_' + id).hidden = false;
            row.querySelector('#role_old_' + id).hidden = true;
            row.querySelector('#role_new_' + id).hidden = false;

            row.querySelector('.btn-edit[data-id="' + id + '"]').hidden = true;
            row.querySelector('.btn-save-edit[data-id="' + id + '"]').hidden = false;
            row.querySelector('#cancel_' + id).hidden = false;
            row.querySelector('.btn-delete[data-id="' + id + '"]').hidden = true;
        }

        // ===== CANCEL EDIT =====
        function onCancel(btn) {
            const id = btn.dataset.id;
            const row = document.getElementById('row_' + id);
            if (!row) return;

            row.querySelector('#password_new_' + id).value = '';
            row.querySelector('#password_new_' + id).hidden = true;
            row.querySelector('#role_old_' + id).hidden = false;
            row.querySelector('#role_new_' + id).hidden = true;

            row.querySelector('.btn-edit[data-id="' + id + '"]').hidden = false;
            row.querySelector('.btn-save-edit[data-id="' + id + '"]').hidden = true;
            row.querySelector('#cancel_' + id).hidden = true;
            row.querySelector('.btn-delete[data-id="' + id + '"]').hidden = false;
        }

        // ===== SAVE USER =====
        async function onSave(btn) {
            const id = btn.dataset.id;
            const row = document.getElementById('row_' + id);
            if (!row) return;

            const username = id;
            const role = row.querySelector('#role_new_' + id).value;
            const password = row.querySelector('#password_new_' + id).value;

            try {
                btn.disabled = true;

                const resp = await fetch(window.location.pathname + '?handler=Update_user', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCsrf()
                    },
                    body: JSON.stringify({ username, role, password })
                });

                const data = await resp.json();
                if (!resp.ok || !data?.success) throw new Error(data?.message || T.saveError);

                showToast('success', T.saveOk);
                // UPDATE ROW UI
                row.querySelector('#password_new_' + id).value = '';
                row.querySelector('#password_new_' + id).hidden = true;
                row.querySelector('#role_old_' + id).textContent = role;
                row.querySelector('#role_old_' + id).hidden = false;
                row.querySelector('#role_new_' + id).hidden = true;

                row.querySelector('.btn-edit[data-id="' + id + '"]').hidden = false;
                row.querySelector('.btn-save-edit[data-id="' + id + '"]').hidden = true;
                row.querySelector('#cancel_' + id).hidden = true;
                row.querySelector('.btn-delete[data-id="' + id + '"]').hidden = false;

            } catch (err) {
                showToast('danger', err.message || T.saveError);
            } finally {
                btn.disabled = false;
            }
        }

        // ===== DELETE USER (WITH CONFIRM MODAL) =====
        let pendingDelete = null;

        function onDelete(btn) {
            const username = btn.dataset.id;
            pendingDelete = { username, rowId: 'row_' + username };

            document.getElementById('confirmMessage').textContent = `${T.confirmDeletePrefix} "${username}"?`;

            // RESET "YES" HANDLER TO AVOID ACCUMULATION
            const yes = document.getElementById('confirmYes');
            const yesClone = yes.cloneNode(true);
            yes.parentNode.replaceChild(yesClone, yes);

            yesClone.addEventListener('click', confirmDelete, { once: true });

            new bootstrap.Modal(document.getElementById('confirmModal'), { backdrop: false }).show();
        }

        async function confirmDelete() {
            if (!pendingDelete) return;

            const { username, rowId } = pendingDelete;
            pendingDelete = null;

            try {
                const resp = await fetch(window.location.pathname + '?handler=Delete_user', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCsrf()
                    },
                    body: JSON.stringify({ username })
                });

                const data = await resp.json();
                if (!resp.ok || !data?.success) throw new Error(data?.message || T.deletionError);

                // CLOSE MODAL + REMOVE ROW + TOAST
                bootstrap.Modal.getInstance(document.getElementById('confirmModal'))?.hide();
                document.getElementById(rowId)?.remove();
                showToast('success', `${T.deletedPrefix} "${username}".`);

            } catch (err) {
                showToast('danger', err.message || T.deletionError);
            }
        }
    </script>
}
