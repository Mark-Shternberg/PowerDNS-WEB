@page
@model PowerDNS_Web.Pages.userModel
@{
    ViewData["Title"] = "User Management";
}

<div class="container mt-4">
    <h2 class="text-center mb-4">User Management</h2>

    <!-- FLEX CONTAINER -->
    <div class="row">
        <!-- ADD USER FORM (LEFT) -->
        <div class="col-md-4">
            <div class="card p-4 shadow">
                <h5 class="text-center mb-3">Add New User</h5>
                <form id="loginForm" method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <input class="form-control" name="username" id="username" type="text" placeholder="Username" required />
                    </div>

                    <div class="mb-3">
                        <label for="role" class="form-label">Select Role:</label>
                        <select class="form-control" name="role" id="role">
                            <option value="Administrator">Administrator</option>
                            <!--<option value="ReadOnly">ReadOnly</option>-->
                        </select>
                    </div>

                    <div class="mb-3">
                        <input class="form-control" name="password" id="password" type="password" placeholder="Password" required />
                    </div>

                    <button type="submit" id="btn-save" class="btn btn-primary w-100">Add User</button>
                </form>
            </div>
        </div>

        <!-- USERS TABLE (RIGHT) -->
        <div class="col-md-8">
            <div class="table-responsive">
                <table class="table table-hover text-center">
                    <thead class="table-dark">
                        <tr>
                            <th>Username</th>
                            <th>Role</th>
                            <th>Password</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.main_table != null)
                        {
                            @foreach (var item in Model.main_table)
                            {
                                <tr id="row_@item.username">
                                    <td><strong>@item.username</strong></td>
                                    <td>
                                        <span id="role_old_@item.username">@item.role</span>
                                        <select hidden name="role" id="role_new_@item.username" class="form-control">
                                            <option value="Administrator" selected="@(item.role == "Administrator" ? "selected" : null)">Administrator</option>
                                            <!--<option value="ReadOnly" selected="@(item.role == "ReadOnly" ? "selected" : null)">ReadOnly</option>-->
                                        </select>
                                    </td>
                                    <td>
                                        <input hidden name="password" id="password_new_@item.username" class="form-control" placeholder="New password">
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-warning btn-sm btn-edit" data-id="@item.username">
                                            <i class="fa fa-edit"></i>
                                        </button>
                                        <button hidden type="button" id="cancel_@item.username" class="btn btn-sm btn-default" data-id="@item.username">Cancel</button>
                                        <button hidden type="button" class="btn btn-success btn-sm btn-save-edit" data-id="@item.username">Save</button>
                                        <button type="button" class="btn btn-danger btn-sm btn-delete" data-id="@item.username">
                                            <i data-id="@item.username" class="fa fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- CONFIRM DELETE MODAL -->
<div id="confirmModal" class="modal fade" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="confirmMessage"></p>
            </div>
            <div class="modal-footer">
                <button id="confirmNo" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button id="confirmYes" class="btn btn-danger ">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- NOTIFICATION -->
<div id="notification" class="notification">
    <span id="notification-message"></span>
</div>

@Html.AntiForgeryToken()

<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.btn-edit').forEach(button => {
            button.addEventListener('click', edit);
        });

        document.querySelectorAll('.btn-save-edit').forEach(button => {
            button.addEventListener('click', save);
        });

        document.querySelectorAll('.btn-default').forEach(button => {
            button.addEventListener('click', cancel);
        });

        // FOR NEW ROWS
        document.addEventListener('click', function (event) {
            if (event.target.closest('.btn-delete')) {
                deleteUser(event);
            }
        });

        document.addEventListener('click', function (event) {
            if (event.target.classList.contains('btn-edit')) {
                edit.call(event.target);
            }
        });

        document.addEventListener('click', function (event) {
            if (event.target.classList.contains('btn-save-edit')) {
                save.call(event.target);
            }
        });

        document.addEventListener('click', function (event) {
            if (event.target.classList.contains('btn-default')) {
                cancel.call(event.target);
            }
        });
    });

    // ADD NEW USER
    document.getElementById('loginForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const username = document.getElementById('username').value;
        const role = document.querySelector("#role option:checked").textContent;
        const password = document.getElementById('password').value;

        if (password === "" || username === "") {
            showNotification('Error. Fill all fields', 2);
            return;
        }

        const response = await fetch(window.location.pathname +'?handler=add_new_user', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ username, role, password })
        });

        if (response.ok) {
            let newModel = await response.json();

            if (!newModel.success) {
                showNotification('Registration error: ' + newModel.message, 2);
                return;
            }

            showNotification('User added!', 1);

            setTimeout(() => location.reload(), 1500);
        } else {
            showNotification('Registration error.', 2);
        }
    });

    // DELETE USER
    async function deleteUser(event) {
        let button = event.target.closest('button');
        let username = button.getAttribute('data-id');
        let row = document.getElementById('row_' + username);

        let modalElement = document.getElementById('confirmModal');
        let confirmMessage = document.getElementById('confirmMessage');
        let confirmYes = document.getElementById('confirmYes');
        let confirmNo = document.getElementById('confirmNo');

        confirmMessage.textContent = `Are you sure you want to delete user: "${username}"?`;

        let confirmModal = new bootstrap.Modal(modalElement, { backdrop: false });
        confirmModal.show();

        confirmYes.onclick = async function () {
            confirmModal.hide();

            let response = await fetch(window.location.pathname +'?handler=Delete_user', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ username: username })
            });

            if (response.ok) {
                confirmModal.hide();
                let result = await response.json();
                if (!result.success) {
                    showNotification('Error:: ' + result.message, 2);
                    return;
                }

                showNotification(`User "${username}" deleted.`, 1);
                row.remove();
            } else {
                showNotification('User deletion error.', 2);
            }
        };

        // CANCEL
        confirmNo.onclick = function () {
            confirmModal.hide();
        };
    }


    // EDIT
    function edit() {
        let rowId = this.getAttribute('data-id');
        let row = document.getElementById('row_' + rowId);

        row.querySelector('#password_new_' + rowId).hidden = false;
        row.querySelector('#role_old_' + rowId).hidden = true;
        row.querySelector('#role_new_' + rowId).hidden = false;

        this.hidden = true;
        row.querySelector('.btn-save-edit[data-id="' + rowId + '"]').hidden = false;
        row.querySelector('#cancel_' + rowId).hidden = false;
        row.querySelector('.btn-delete[data-id="' + rowId + '"]').hidden = true;
    }

    // UPDATE USER
    async function save() {
        let rowId = this.getAttribute('data-id');
        let row = document.getElementById('row_' + rowId);

        let username = rowId;
        let role = row.querySelector('#role_new_' + rowId).value;
        let password = row.querySelector('#password_new_' + rowId).value;

        let response = await fetch(window.location.pathname + '?handler=Update_user', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                username: username,
                role: role,
                password: password,
            })
        });

        if (response.ok) {
            let newModel = await response.json();
            if (!newModel.success) {
                showNotification('Save error: ' + newModel.message, 2);
                return;
            }

            showNotification('Save successful!', 1);

            row.querySelector('#password_new_' + rowId).hidden = true;
            row.querySelector('#role_old_' + rowId).textContent = role;
            row.querySelector('#role_old_' + rowId).hidden = false;
            row.querySelector('#role_new_' + rowId).hidden = true;

            row.querySelector('.btn-edit[data-id="' + rowId + '"]').hidden = false;
            row.querySelector('.btn-save-edit[data-id="' + rowId + '"]').hidden = true;
            row.querySelector('#cancel_' + rowId).hidden = true;
            row.querySelector('.btn-delete[data-id="' + rowId + '"]').hidden = false;
        } else {
            showNotification('Save error.', 2);
        }
    }

    // CANCEL
    function cancel() {
        let rowId = this.getAttribute('data-id');
        let row = document.getElementById('row_' + rowId);

        row.querySelector('#password_new_' + rowId).hidden = true;
        row.querySelector('#role_old_' + rowId).hidden = false;
        row.querySelector('#role_new_' + rowId).hidden = true;

        row.querySelector('.btn-edit[data-id="' + rowId + '"]').hidden = false;
        row.querySelector('.btn-save-edit[data-id="' + rowId + '"]').hidden = true;
        row.querySelector('#cancel_' + rowId).hidden = true;
        row.querySelector('.btn-delete[data-id="' + rowId + '"]').hidden = false;
    }
</script>
