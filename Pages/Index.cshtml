@page
@model PowerDNS_Web.Pages.IndexModel
@{
    ViewData["Title"] = "PowerDNS Statistics";
}

<div class="container mt-4">
    <h2 class="mb-4 text-center"><i class="fa fa-chart-line"></i> PowerDNS</h2>

    <div class="row text-center">
        <!-- INFO -->
        <div class="col-md-3 flex" style="width: 500px;">
            <div class="card bg-primary text-white flex-row">
                <div class="card-body">
                    <h5 class="card-title">Active port</h5>
                    <p class="card-text display-6">
                        @if (ViewData["RecursorEnabled"]?.ToString() == "Enabled")
                        {
                            <a>5300</a>
                        }
                        else
                        {
                            <a>53</a>
                        }
                    </p>
                </div>
                <div class="card-body">
                    <h5 class="card-title">Uptime</h5>
                    <p class="card-text display-6" id="uptime">--</p>
                </div>
            </div>
        </div>
    </div>

    <h3 class="text-center mt-4">Statistics</h3>
    <!-- GRID SYSTEM -->
    <div class="row text-center">

        <!-- QUERY COUNT -->
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <h5 class="card-title">Total Queries</h5>
                    <p class="card-text display-6" id="totalQueries">--</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        <!-- QUERIES FOR NONEXISTENT TYPES -->
        <div class="col-md-4">
            <div class="card border border-secondary shadow-sm">
                <div class="card-header text-center bg-light">
                    <h5 class="text-warning fw-bold"><i class="fa fa-exclamation-triangle"></i> Queries for Missing Types</h5>
                </div>
                <div class="card-body">
                    <pre id="noerror-queries" class="log-container p-3 bg-white border rounded text-dark fw-semibold">Loading...</pre>
                </div>
            </div>
        </div>

        <!-- NONEXISTENT QUERIES -->
        <div class="col-md-4">
            <div class="card border border-secondary shadow-sm">
                <div class="card-header text-center bg-light">
                    <h5 class="text-danger fw-bold"><i class="fa fa-exclamation-circle"></i> Queries for Nonexistent Records</h5>
                </div>
                <div class="card-body">
                    <pre id="nxdomain-queries" class="log-container p-3 bg-white border rounded text-dark fw-semibold">Loading...</pre>
                </div>
            </div>
        </div>

        <!-- QUERIES RECEIVED -->
        <div class="col-md-4">
            <div class="card border border-secondary shadow-sm">
                <div class="card-header text-center bg-light">
                    <h5 class="text-success fw-bold"><i class="fa fa-check-circle"></i> UDP Queries Received</h5>
                </div>
                <div class="card-body">
                    <pre id="queries" class="log-container p-3 bg-white border rounded text-dark fw-semibold">Loading...</pre>
                </div>
            </div>
        </div>
    </div>



    @if (ViewData["RecursorEnabled"]?.ToString() == "Enabled")
    {
        <h3 class="text-center mt-4"><i class="fa fa-database"></i> Recursor</h3>

        <div class="row text-center">
            <!-- INFO -->
            <div class="col-md-3 flex" style="width: 500px;">
                <div class="card bg-primary text-white flex-row">
                    <div class="card-body">
                        <h5 class="card-title">Active port</h5>
                        <p class="card-text display-6">53</p>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Recursor Uptime</h5>
                        <p class="card-text display-6" id="recursorUptime">--</p>
                    </div>
                </div>
            </div>
        </div>

        <h3 class="text-center mt-4">Statistics</h3>

        <div class="row text-center">
            <!-- RECURSOR CACHE HITS -->
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <h5 class="card-title">Recursor Cache Hits</h5>
                        <p class="card-text display-6" id="recursorCacheHits">--</p>
                    </div>
                </div>
            </div>

            <!-- RECURSOR CACHE MISSES -->
            <div class="col-md-3">
                <div class="card bg-warning text-black">
                    <div class="card-body">
                        <h5 class="card-title">Recursor Cache Misses</h5>
                        <p class="card-text display-6" id="recursorCacheMisses">--</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="row justify-content-center">
            <!-- TOP REQUESTS -->
            <div class="col-md-4">
                <div class="card border border-secondary shadow-sm">
                    <div class="card-header text-center bg-light">
                        <h5 class="text-dark fw-bold">Top Requests</h5>
                    </div>
                    <div class="card-body">
                            <pre id="top-queries" class="log-container p-3 bg-white border rounded text-dark fw-semibold">Loading...</pre>
                    </div>
                </div>
            </div>

            <!-- TOP REMOTES -->
            <div class="col-md-4">
                <div class="card border border-secondary shadow-sm">
                    <div class="card-header text-center bg-light">
                        <h5 class="text-dark fw-bold"><i class="fa fa-network-wired"></i> Top Remotes</h5>
                    </div>
                    <div class="card-body">
                            <pre id="top-remotes" class="log-container p-3 bg-white border rounded text-dark fw-semibold">Loading...</pre>
                    </div>
                </div>
            </div>
        </div>
    }
    <!-- CHART -->
    <div class="mt-5">
        <canvas id="queryChart"></canvas>
    </div>
</div>

@Html.AntiForgeryToken()
<script src="~/js/chart.js"></script>

<script>
    // FUNCTION TO FETCH POWERDNS STATISTICS
    async function fetchPowerDNSStats() {
        try {
            const response = await fetch("/Index?handler=Stats", {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            });

            const data = await response.json();

            if (!data.success) {
                console.error("Error fetching PowerDNS stats:", data.message);
                return;
            }

            // UPDATE GENERAL STATISTICS
            document.getElementById("uptime").innerText = formatUptime(data.uptime);
            document.getElementById("totalQueries").innerText = data.totalQueries;

            // UPDATE NOERROR-QUERIES, NXDOMAIN-QUERIES, QUERIES
            updateQueryList("noerror-queries", data.noerrorQueries);
            updateQueryList("nxdomain-queries", data.nxdomainQueries);
            updateQueryList("queries", data.queries);

            // IF RECURSOR IS ENABLED, UPDATE RECURSOR STATS
            if (document.getElementById("recursorCacheHits")) {
                document.getElementById("recursorCacheHits").innerText = data.recursorCacheHits;
                document.getElementById("recursorCacheMisses").innerText = data.recursorCacheMisses;
                document.getElementById("recursorUptime").innerText = formatUptime(data.recursorUptime);

                updateQueryList("top-queries", data.topQueries);
                updateQueryList("top-remotes", data.topRemotes);
            }

        } catch (error) {
            console.error("Failed to load stats:", error);
        }
    }

    // FUNCTION TO FORMAT UPTIME IN HOURS AND MINUTES
    function formatUptime(seconds) {
        let hours = Math.floor(seconds / 3600);
        let minutes = Math.floor((seconds % 3600) / 60);
        return `${hours}h ${minutes}m`;
    }

    // FUNCTION TO UPDATE QUERY LIST DISPLAY
    function updateQueryList(elementId, data) {
        const container = document.getElementById(elementId);
        if (!container) return;

        if (!data || data.length === 0) {
            container.innerText = "No data available";
            return;
        }

        let maxNameLength = 40;
        let maxValueLength = 8;

        let formattedData = data.map(entry => {
            let fullName = entry.name;
            let shortName = fullName.length > maxNameLength
                ? fullName.substring(0, maxNameLength - 3) + "..."
                : fullName;

            let value = entry.value.toString().padStart(maxValueLength, " ");

            return `<span class="query-item" title="${fullName}">${shortName}</span> <span class="query-value">${value}</span>`;
        }).join("\n");

        container.innerHTML = `<pre>${formattedData}</pre>`;
    }




    // FETCH STATS INITIALLY AND UPDATE EVERY 5 SECONDS
    fetchPowerDNSStats();
    setInterval(fetchPowerDNSStats, 5000);

</script>
