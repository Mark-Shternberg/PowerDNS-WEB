@page
@model PowerDNS_Web.Pages.IndexModel
@{
    ViewData["Title"] = "PowerDNS Statistics";
}

<div class="container mt-4">
    <h2 class="mb-4 text-center"><i class="fa fa-chart-line"></i> PowerDNS Statistics</h2>

    <!-- GRID SYSTEM -->
    <div class="row text-center">

        <!-- CACHE HITS -->
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <h5 class="card-title">Cache Hits</h5>
                    <p class="card-text display-6" id="cacheHits">--</p>
                </div>
            </div>
        </div>

        <!-- CACHE MISSES -->
        <div class="col-md-3">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <h5 class="card-title">Cache Misses</h5>
                    <p class="card-text display-6" id="cacheMisses">--</p>
                </div>
            </div>
        </div>

        <!-- UPTIME -->
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <h5 class="card-title">Uptime</h5>
                    <p class="card-text display-6" id="uptime">--</p>
                </div>
            </div>
        </div>

        <!-- QUERY COUNT -->
        <div class="col-md-3">
            <div class="card bg-warning text-dark">
                <div class="card-body">
                    <h5 class="card-title">Total Queries</h5>
                    <p class="card-text display-6" id="totalQueries">--</p>
                </div>
            </div>
        </div>
    </div>

    <!-- CHART -->
    <div class="mt-5">
        <canvas id="queryChart"></canvas>
    </div>
</div>

@Html.AntiForgeryToken()
<script src="~/js/chart.js"></script>

<script>
    async function fetchPowerDNSStats() {
        try {
            const response = await fetch("/Index?handler=Stats", {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            });
            const data = await response.json();

            document.getElementById("cacheHits").innerText = data.cacheHits;
            document.getElementById("cacheMisses").innerText = data.cacheMisses;
            document.getElementById("uptime").innerText = formatUptime(data.uptime);
            document.getElementById("totalQueries").innerText = data.totalQueries;

            updateChart(data.queryRates);
        } catch (error) {
            console.error("Failed to load stats:", error);
        }
    }

    function formatUptime(seconds) {
        let hours = Math.floor(seconds / 3600);
        let minutes = Math.floor((seconds % 3600) / 60);
        return `${hours}h ${minutes}m`;
    }

    function updateChart(queryRates) {
        let ctx = document.getElementById("queryChart").getContext("2d");
        new Chart(ctx, {
            type: "line",
            data: {
                labels: Array.from({ length: queryRates.length }, (_, i) => `${i} sec ago`),
                datasets: [{
                    label: "Queries per second",
                    data: queryRates,
                    borderColor: "blue",
                    fill: false
                }]
            },
            options: {
                responsive: true,
                scales: { y: { beginAtZero: true } }
            }
        });
    }

    fetchPowerDNSStats();
    setInterval(fetchPowerDNSStats, 5000);
</script>

