@page "/zone/{ZoneName}"
@model PowerDNS_Web.Pages.zone.ZonePageModel
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer L
@{
    ViewData["Title"] = L["Title.ManageZone", Model.ZoneName];
}

<div class="container mt-4">

    <!-- TempData toasts (single, guarded) -->
    <script>
        (function () {
            const ok  = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["NoteSuccess"] ?? null));
            const wrn = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["NoteWarn"] ?? null));
            const err = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["NoteError"] ?? null));

            // fallback if showToast() не определён
            if (typeof window.showToast !== 'function') {
                window.showToast = function(kind, msg){
                    const bg = kind==='success'?'bg-success':kind==='warning'?'bg-warning text-dark':kind==='danger'?'bg-danger':'bg-secondary';
                    const wrap = document.createElement('div');
                    wrap.innerHTML = `
                      <div class="toast align-items-center text-white ${bg} border-0" role="alert" aria-live="assertive" aria-atomic="true"
                           style="position:fixed; right:1rem; top:1rem; z-index:1080; min-width:260px">
                        <div class="d-flex">
                          <div class="toast-body">${msg}</div>
                          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                      </div>`;
                    const toastEl = wrap.firstElementChild;
                    document.body.appendChild(toastEl);
                    const t = new bootstrap.Toast(toastEl, { delay: 3500 });
                    t.show();
                    toastEl.addEventListener('hidden.bs.toast', () => toastEl.remove());
                }
            }

            document.addEventListener('DOMContentLoaded', function () {
                if (window.__toastOnce) return; window.__toastOnce = true;
                if (ok)  showToast('success', ok);
                if (wrn) showToast('warning', wrn);
                if (err) showToast('danger',  err);
            });
        })();
    </script>

    <!-- Header -->
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-2 mb-3">
        <div>
            <h2 class="mb-0">@L["Hdr.Zone"]: <span class="text-primary">@Model.ZoneName</span></h2>
            <div class="text-muted small">@L["Hdr.Subtitle"]</div>
        </div>
        <div class="btn-group">
            <button type="button" class="btn btn-outline-secondary" id="btnExpandAll">
                <i class="fa fa-chevron-down me-1"></i>@L["Btn.ExpandAll"]
            </button>
            <button type="button" class="btn btn-outline-secondary" id="btnCollapseAll">
                <i class="fa fa-chevron-right me-1"></i>@L["Btn.CollapseAll"]
            </button>
        </div>
    </div>

    <!-- Quick Add -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h5 class="card-title mb-3"><i class="fa fa-plus-circle me-2"></i>@L["AddRecord.Title"]</h5>
            <form method="post" asp-page-handler="AddRecord" class="row g-3 needs-validation" novalidate>
                <div class="col-md-3">
                    <label class="form-label">@L["Form.Subdomain"]</label>
                    <div class="input-group">
                        <select id="subdomainSelect" name="Subdomain"
                                class="form-select rounded-end-0" required>
                            <option value="@@" selected>@L["Form.Root"]</option>
                            @foreach (var subdomain in Model.GroupedRecords.Keys.Where(k => k != "@"))
                            {
                                <option value="@subdomain">@subdomain</option>
                            }
                        </select>
                        <button type="button"
                                class="btn btn-primary rounded-start-0 rounded-end border-start-0"
                                data-bs-toggle="modal"
                                data-bs-target="#addSubdomainModal"
                                title="@L["Form.SubdomainAdd"]">
                            <i class="fa fa-plus"></i>
                        </button>
                        <div class="invalid-feedback">@L["Val.SelectSubdomain"]</div>
                    </div>
                </div>

                <div class="col-md-2">
                    <label class="form-label">@L["Form.Type"]</label>
                    <select id="recordType" name="RecordType" class="form-select" onchange="toggleAddRequired()" required>
                        <option value="A">A</option>
                        <option value="AAAA">AAAA</option>
                        <option value="CNAME">CNAME</option>
                        <option value="TXT">TXT</option>
                        <option value="MX">MX</option>
                        <option value="SRV">SRV</option>
                        <option value="NS">NS</option>
                        <option value="HTTPS">HTTPS</option>
                    </select>
                    <div class="invalid-feedback">@L["Val.SelectType"]</div>
                </div>

                <div class="col-md-2">
                    <label class="form-label">TTL</label>
                    <input type="number" name="Ttl" id="addTtl" class="form-control" min="300" max="604800" step="1" value="3600" required>
                    <div class="invalid-feedback">300…604800.</div>
                </div>

                <!-- Generic value -->
                <div class="col-md-5" id="valueField">
                    <label class="form-label">@L["Form.Value"]</label>
                    <input type="text" id="recordValue" name="Value" class="form-control" placeholder="@L["Ph.Value.Generic"]">
                    <div class="form-text text-muted d-none" id="helpGeneric">@L["Help.Generic"]</div>
                    <div class="invalid-feedback">@L["Val.ValueRequired"]</div>
                </div>

                <!-- TXT -->
                <div class="col-md-5 d-none" id="txtField">
                    <label class="form-label">@L["Form.TxtValue"]</label>
                    <textarea id="txtValue" name="TxtValue" class="form-control textarea" oninput="autoResizeTextarea(this)" placeholder='v=spf1 include:_spf.example.com ~all'></textarea>
                    <small class="form-text text-muted">@L["Help.TxtNoQuotes"]</small>
                    <div class="invalid-feedback">@L["Val.TxtRequired"]</div>
                </div>

                <!-- NS -->
                <div class="col-md-5 d-none" id="nsField">
                    <label class="form-label">@L["Form.NsTarget"]</label>
                    <input type="text" id="nsTarget" name="NsTarget" class="form-control" placeholder="ns1.example.com.">
                    <div class="invalid-feedback">@L["Val.NsRequired"]</div>
                </div>

                <!-- HTTPS (SVCB) -->
                <div class="col-md-5 d-none" id="httpsSvcbField">
                    <label class="form-label">@L["Form.HttpsParams"]</label>
                    <input type="text" id="httpsValue" name="HttpsValue" class="form-control" placeholder='"1 . alpn=h3"'>
                    <div class="invalid-feedback">@L["Val.HttpsRequired"]</div>
                </div>

                <!-- MX -->
                <div class="col-md-2 d-none" id="mxPriorityField">
                    <label class="form-label">@L["Form.Priority"]</label>
                    <input type="number" id="mxPriority" name="MxPriority" class="form-control" min="1" max="1000" step="1" value="10">
                    <div class="invalid-feedback">@L["Val.MxPriority"]</div>
                </div>

                <!-- SRV -->
                <div class="col-md-2 d-none" id="srvPriorityField">
                    <label class="form-label">@L["Form.Priority"]</label>
                    <input type="number" id="srvPriority" name="SrvPriority" class="form-control" min="0" max="65535" step="1" value="0">
                </div>
                <div class="col-md-2 d-none" id="srvWeightField">
                    <label class="form-label">@L["Form.Weight"]</label>
                    <input type="number" id="srvWeight" name="SrvWeight" class="form-control" min="0" max="65535" step="1" value="0">
                </div>
                <div class="col-md-2 d-none" id="srvPortField">
                    <label class="form-label">@L["Form.Port"]</label>
                    <input type="number" id="srvPort" name="SrvPort" class="form-control" min="1" max="65535" step="1" value="443">
                </div>

                <div class="col-md-2 d-flex" style="margin-top:32px;">
                    <button type="submit" class="btn btn-success w-100"><i class="fa fa-plus me-1"></i>@L["Btn.Add"]</button>
                </div>

                @Html.AntiForgeryToken()
            </form>
        </div>
    </div>

    <!-- Records -->
    <div class="d-flex align-items-center justify-content-between mb-2">
        <h5 class="mb-0"><i class="fa fa-list me-2"></i>@L["Hdr.Existing"]</h5>
        <div class="input-group" style="max-width: 340px;">
            <span class="input-group-text"><i class="fa fa-search"></i></span>
            <input class="form-control" id="searchRecords" type="text" placeholder="@L["Ph.Filter"]">
            <button type="button" id="clearSearch" class="btn btn-outline-secondary" style="display:none">@L["Btn.Clear"]</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-sm table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th style="width:24%">@L["Th.Subdomain"]</th>
                    <th style="width:8%">@L["Th.Type"]</th>
                    <th>@L["Th.Value"]</th>
                    <th style="width:10%">TTL</th>
                    <th style="width:12%">@L["Th.Actions"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in Model.GroupedRecords.OrderBy(g => g.Key == "@" ? 0 : 1).ThenBy(g => g.Key))
                {
                    <tr class="zone-header" data-group="@group.Key">
                        <td colspan="5" class="fw-semibold">
                            <i class="fa fa-chevron-right me-2 caret" aria-hidden="true"></i>
                            @(group.Key == "@" ? L["Form.Root"].Value : group.Key)
                            <span class="badge rounded-pill text-muted ms-2">@group.Value.Sum(r => r.Content.Count)</span>
                        </td>
                    </tr>
                    @foreach (var record in group.Value)
                    {
                        @foreach (var value in record.Content)
                        {
                            <tr class="zone-record" data-group="@group.Key" style="display:none;">
                                <td class="text-nowrap">@record.Name</td>
                                <td>
                                    <span class="badge bg-secondary">@record.Type</span>
                                </td>
                                <td class="line-break">
                                    <code class="text-break">@value</code>
                                    <button class="btn btn-sm btn-outline-secondary ms-2 btn-copy" type="button" data-value="@value" title="@L["Btn.Copy"]">
                                        <i class="fa fa-copy"></i>
                                    </button>
                                </td>
                                <td class="text-muted">@record.Ttl</td>
                                <td class="text-nowrap">
                                    <button type="button" class="btn btn-warning btn-sm"
                                            title="@L["Btn.Edit"]"
                                            onclick="openEdit('@record.Name','@record.Type','@value','@record.Ttl')">
                                        <i class="fa fa-edit"></i>
                                    </button>
                                    @if (record.Type != "SOA")
                                    {
                                        <button type="button" class="btn btn-danger btn-sm"
                                                title="@L["Btn.Delete"]"
                                                onclick="openDelete('@record.Name','@record.Type','@value')">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- EDIT RECORD MODAL -->
<div class="modal fade" id="editRecordModal" tabindex="-1" aria-labelledby="editRecordModalLabel" aria-hidden="true" data-bs-backdrop="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form method="post" asp-page-handler="EditRecord" class="needs-validation" novalidate>
                <div class="modal-header">
                    <h5 class="modal-title" id="editRecordModalLabel">@L["Edit.Title"]</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@L["Btn.Close"]"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editRecordName" name="Name">
                    <input type="hidden" id="editRecordType" name="Type">
                    <input type="hidden" id="editRecordOldValue" name="OldValue">

                    <div class="mb-3" id="editValueField">
                        <label class="form-label">@L["Form.Value"]</label>
                        <input type="text" id="editRecordValue" name="Value" class="form-control">
                        <div class="invalid-feedback">@L["Val.ValueRequired"]</div>
                    </div>

                    <!-- TXT -->
                    <div class="mb-3 d-none" id="editTXTField">
                        <label class="form-label">@L["Form.TxtValue"]</label>
                        <textarea id="editTXTValue" name="Value" class="form-control textarea" oninput="autoResizeTextarea(this)"></textarea>
                        <small class="form-text text-muted">@L["Help.TxtAutoQuotes"]</small>
                        <div class="invalid-feedback">@L["Val.TxtRequired"]</div>
                    </div>

                    <!-- MX -->
                    <div class="mb-3 d-none" id="editMxPriorityField">
                        <label class="form-label">@L["Form.Priority"]</label>
                        <input type="number" id="editMxPriority" name="MxPriority" class="form-control" min="1" max="1000" step="1" value="10">
                    </div>

                    <!-- SRV -->
                    <div class="mb-3 d-none" id="editSrvPriorityField">
                        <label class="form-label">@L["Form.Priority"]</label>
                        <input type="number" id="editSrvPriority" name="SrvPriority" class="form-control" min="0" max="65535" step="1" value="0">
                    </div>
                    <div class="mb-3 d-none" id="editSrvWeightField">
                        <label class="form-label">@L["Form.Weight"]</label>
                        <input type="number" id="editSrvWeight" name="SrvWeight" class="form-control" min="0" max="65535" step="1" value="0">
                    </div>
                    <div class="mb-3 d-none" id="editSrvPortField">
                        <label class="form-label">@L["Form.Port"]</label>
                        <input type="number" id="editSrvPort" name="SrvPort" class="form-control" min="1" max="65535" step="1" value="443">
                    </div>

                    <!-- SOA -->
                    <div id="editSoaFields" class="d-none">
                        <h6 class="mt-3">@L["Soa.Title"]</h6>
                        <div class="mb-3">
                            <label class="form-label">@L["Soa.PrimaryNs"]</label>
                            <input type="text" id="editSoaNs" name="SoaNs" class="form-control">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">@L["Soa.AdminEmail"]</label>
                            <input type="text" id="editSoaEmail" name="SoaEmail" class="form-control">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">@L["Soa.Refresh"]</label>
                            <input type="number" id="editSoaRefresh" name="SoaRefresh" class="form-control" min="1200" max="86400" step="1" value="7200">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">@L["Soa.Retry"]</label>
                            <input type="number" id="editSoaRetry" name="SoaRetry" class="form-control" min="180" max="7200" step="1" value="1800">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">@L["Soa.Expire"]</label>
                            <input type="number" id="editSoaExpire" name="SoaExpire" class="form-control" min="86400" max="2419200" step="1" value="1209600">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">@L["Soa.MinimumTtl"]</label>
                            <input type="number" id="editSoaMinimumTtl" name="SoaMinimumTtl" class="form-control" min="300" max="86400" step="1" value="3600">
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">TTL</label>
                        <input type="number" id="editRecordTtl" name="Ttl" class="form-control" min="300" max="604800" step="1" value="3600" required>
                        <div class="invalid-feedback">300…604800.</div>
                    </div>

                    @Html.AntiForgeryToken()
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-warning w-100">@L["Btn.SaveChanges"]</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add Subdomain -->
<div class="modal fade" id="addSubdomainModal" tabindex="-1" aria-labelledby="addSubdomainModalLabel" aria-hidden="true" data-bs-backdrop="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form method="post" asp-page-handler="AddSubdomain" class="needs-validation" novalidate>
                <div class="modal-header">
                    <h5 class="modal-title" id="addSubdomainModalLabel">@L["Sub.Title"]</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@L["Btn.Close"]"></button>
                </div>
                <div class="modal-body">
                    <label class="form-label">@L["Sub.Name"]</label>
                    <input type="text" id="subdomainInput" name="Subdomain" class="form-control" required>
                    <div class="invalid-feedback">@L["Val.SubdomainRequired"]</div>
                    @Html.AntiForgeryToken()
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary w-100">@L["Btn.Add"]</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete confirm -->
<div class="modal fade" id="deleteRecordModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form method="post" asp-page-handler="DeleteRecord">
                <div class="modal-header">
                    <h5 class="modal-title">@L["Del.Title"]</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="@L["Btn.Close"]"></button>
                </div>
                <div class="modal-body">
                    <p id="deleteText"></p>
                    <input type="hidden" id="deleteName" name="Name">
                    <input type="hidden" id="deleteType" name="Type">
                    <input type="hidden" id="deleteValue" name="Value">
                    @Html.AntiForgeryToken()
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal" type="button">@L["Btn.Cancel"]</button>
                    <button class="btn btn-danger" type="submit">@L["Btn.Delete"]</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // локализованные строки в JS
        window.i18n = {
            CopySuccess: "@L["Copy.Success"]",
            CopyFail: "@L["Copy.Fail"]",
            DelConfirm: "@L["Del.ConfirmTpl"]"
        };
        const fmt = (s, ...args) => s.replace(/{(\d+)}/g, (m, i) => (args[i] ?? m));

        // Bootstrap HTML5 validation
        (() => {
          'use strict';
          const forms = document.querySelectorAll('.needs-validation');
          Array.from(forms).forEach(form => {
            form.addEventListener('submit', evt => {
              if (!form.checkValidity()) { evt.preventDefault(); evt.stopPropagation(); }
              form.classList.add('was-validated');
            }, false);
          });
        })();

        // Toggle help text for Add value
        function toggleAddRequired() {
          const t = document.getElementById('recordType').value;
          const show = id => document.getElementById(id).classList.remove('d-none');
          const hide = id => document.getElementById(id).classList.add('d-none');

          // hide all optional
          ['txtField','nsField','httpsSvcbField','mxPriorityField','srvPriorityField','srvWeightField','srvPortField'].forEach(hide);
          const val = document.getElementById('recordValue');
          const help = document.getElementById('helpGeneric');
          val.required = false;
          document.getElementById('txtValue').required = false;
          document.getElementById('nsTarget').required = false;
          document.getElementById('httpsValue').required = false;
          ['mxPriority','srvPriority','srvWeight','srvPort'].forEach(id => document.getElementById(id).required = false);
          document.getElementById('valueField').classList.remove('d-none');
          help.classList.add('d-none');

          if (t === 'TXT') { show('txtField'); document.getElementById('txtValue').required = true; document.getElementById('valueField').classList.add('d-none'); }
          else if (t === 'NS') { show('nsField'); document.getElementById('nsTarget').required = true; document.getElementById('valueField').classList.add('d-none'); help.classList.remove('d-none'); }
          else if (t === 'HTTPS') { show('httpsSvcbField'); document.getElementById('httpsValue').required = true; document.getElementById('valueField').classList.add('d-none'); }
          else if (t === 'MX') { show('mxPriorityField'); val.required = true; help.classList.remove('d-none'); }
          else if (t === 'SRV') { ['srvPriorityField','srvWeightField','srvPortField'].forEach(show); val.required = true; help.classList.remove('d-none'); }
          else { val.required = true; if (t==='CNAME' || t==='AAAA' || t==='A') help.classList.remove('d-none'); }
        }
        toggleAddRequired();

        // Collapse groups with header click (фикс направлений стрелок)
        document.addEventListener('click', (e) => {
          const header = e.target.closest('tr.zone-header');
          if (!header) return;
          const group = header.getAttribute('data-group');
          const rows = document.querySelectorAll(`tr.zone-record[data-group="${group}"]`);
          const caret = header.querySelector('.caret');

          const currentlyOpen = rows.length && rows[0].style.display !== 'none';
          const willOpen = !currentlyOpen;

          rows.forEach(r => r.style.display = willOpen ? 'table-row' : 'none');

          caret.classList.toggle('fa-chevron-down', willOpen);
          caret.classList.toggle('fa-chevron-right', !willOpen);
        });

        // Expand / Collapse all
        document.getElementById('btnExpandAll').addEventListener('click', () => {
            document.querySelectorAll('tr.zone-record').forEach(r => r.style.display = 'table-row');
            document.querySelectorAll('tr.zone-header .caret').forEach(i => { i.classList.remove('fa-chevron-right'); i.classList.add('fa-chevron-down'); });
        });
        document.getElementById('btnCollapseAll').addEventListener('click', () => {
            document.querySelectorAll('tr.zone-record').forEach(r => r.style.display = 'none');
            document.querySelectorAll('tr.zone-header .caret').forEach(i => { i.classList.add('fa-chevron-right'); i.classList.remove('fa-chevron-down'); });
        });

        // Filter
        (function(){
            const input = document.getElementById('searchRecords');
            const clear = document.getElementById('clearSearch');
            const apply = () => {
                const q = (input.value || '').toLowerCase();
                clear.style.display = q ? 'inline-block' : 'none';
                const rows = document.querySelectorAll('tr.zone-record');
                rows.forEach(r => {
                    const name = (r.querySelector('td:nth-child(1)')?.textContent || '').toLowerCase();
                    const type = (r.querySelector('td:nth-child(2)')?.textContent || '').toLowerCase();
                    const val  = (r.querySelector('td:nth-child(3)')?.textContent || '').toLowerCase();
                    r.style.display = (name.includes(q) || type.includes(q) || val.includes(q)) ? 'table-row' : 'none';
                });
                // set carets accordingly
                document.querySelectorAll('tr.zone-header').forEach(h => {
                    const grp = h.getAttribute('data-group');
                    const visible = Array.from(document.querySelectorAll(`tr.zone-record[data-group="${grp}"]`)).some(rr => rr.style.display !== 'none');
                    const caret = h.querySelector('.caret');
                    caret.classList.toggle('fa-chevron-down', visible);
                    caret.classList.toggle('fa-chevron-right', !visible);
                });
            };
            if (input) {
                input.addEventListener('input', apply);
                clear.addEventListener('click', () => { input.value=''; apply(); });
            }
        })();

        // Copy buttons
        document.addEventListener('click', async (e) => {
            const btn = e.target.closest('.btn-copy');
            if (!btn) return;
            try {
                await navigator.clipboard.writeText(btn.getAttribute('data-value'));
                showToast('success', window.i18n.CopySuccess);
            } catch {
                showToast('danger', window.i18n.CopyFail);
            }
        });

        // Edit modal open
        function openEdit(name, type, value, ttl) {
          document.getElementById('editRecordName').value = name;
          document.getElementById('editRecordType').value = type;
          document.getElementById('editRecordOldValue').value = value;
          document.getElementById('editRecordTtl').value = ttl;

          ['editValueField','editTXTField','editMxPriorityField','editSrvPriorityField','editSrvWeightField','editSrvPortField','editSoaFields']
            .forEach(id => document.getElementById(id).classList.add('d-none'));

          document.getElementById('editRecordValue').value = value;
          document.getElementById('editValueField').classList.remove('d-none');

          if (type === 'TXT') {
            const t = value.trim().replace(/^"/,'').replace(/"$/,'');
            document.getElementById('editTXTValue').value = t;
            document.getElementById('editTXTField').classList.remove('d-none');
            document.getElementById('editValueField').classList.add('d-none');
            setTimeout(() => autoResizeTextarea(document.getElementById('editTXTValue')), 50);
          } else if (type === 'MX') {
            const parts = value.split(' ');
            if (parts.length >= 2) {
              document.getElementById('editMxPriority').value = parts[0];
              document.getElementById('editRecordValue').value = parts.slice(1).join(' ');
            }
            document.getElementById('editMxPriorityField').classList.remove('d-none');
          } else if (type === 'SRV') {
            const p = value.split(' ');
            if (p.length >= 4) {
              document.getElementById('editSrvPriority').value = p[0];
              document.getElementById('editSrvWeight').value   = p[1];
              document.getElementById('editSrvPort').value     = p[2];
              document.getElementById('editRecordValue').value = p.slice(3).join(' ');
            }
            ['editSrvPriorityField','editSrvWeightField','editSrvPortField'].forEach(id => document.getElementById(id).classList.remove('d-none'));
          } else if (type === 'SOA') {
            const p = value.split(' ');
            if (p.length === 7) {
              document.getElementById('editSoaNs').value         = p[0];
              document.getElementById('editSoaEmail').value      = p[1];
              document.getElementById('editSoaRefresh').value    = p[3];
              document.getElementById('editSoaRetry').value      = p[4];
              document.getElementById('editSoaExpire').value     = p[5];
              document.getElementById('editSoaMinimumTtl').value = p[6];
            }
            document.getElementById('editSoaFields').classList.remove('d-none');
            document.getElementById('editValueField').classList.add('d-none');
          }

          new bootstrap.Modal(document.getElementById('editRecordModal'), { backdrop: false }).show();
        }

        // Delete modal open
        function openDelete(name, type, value) {
          document.getElementById('deleteText').textContent = fmt(window.i18n.DelConfirm, type, value, name);
          document.getElementById('deleteName').value  = name;
          document.getElementById('deleteType').value  = type;
          document.getElementById('deleteValue').value = value;
          new bootstrap.Modal(document.getElementById('deleteRecordModal'), { backdrop: false }).show();
        }

        // helpers
        function autoResizeTextarea(el){ el.style.height='auto'; el.style.height = el.scrollHeight + 'px'; }
    </script>
}
